(defthm pw-pwcons (implies (and (rationalp x) (lorp ls) (descendingp ls) (> x (car ls)))
              (equal (powerset (cons x ls)) 
                     (powerset-cons x (powerset ls)))))

(defthm descending-pw-pwcons (implies (and (rationalp x) 
                   (lorp ls) 
                   (descendingp ls) 
                   (> x (car ls))
                   (descending-powersetp (powerset (cons x ls))))
              (descending-powersetp (powerset-cons x (powerset ls))))
  :hints (("Goal" :use pw-pwcons)))

(skip-proofs (defthm desc-add-rat (implies (and (rationalp x)
                             (lorp ls)
                             (descendingp ls)
                             (< (car ls) x)
                             (descending-powersetp (powerset ls)))
                             (descending-powersetp (add-rat x (powerset ls))))))

(skip-proofs (defthm expand-merge-sort
               (implies (and (descending-powersetp ls1)
                             (descending-powersetp ls2)
                             (descending-powersetp (powerset ls)))
                        (descending-powersetp (merge-sort ls1 ls2)))))

(defthm expand-powerset 
               (implies (and (rationalp x)
                             (lorp ls)
                             (descendingp ls)
                             (< (car ls) x)
                             (descending-powersetp (powerset ls)))
                        (descending-powersetp (merge-sort (add-rat x (powerset ls))
                                                        (powerset ls))))
               :hints (("Goal" :use desc-add-rat)
                       ("Goal" :use expand-merge-sort)))


(defthm pw-cons-descendingp (implies (and (rationalp x)
                                         (lorp ls) 
                                         (descendingp ls)
                                         (> x (car ls))
                                         (descending-powersetp (powerset ls)))
                                    (descending-powersetp (powerset-cons x (powerset ls))))
  :hints (("Goal" :use expand-powerset)))

(thm (implies (and (lorp ls)
                   (descendingp ls))
              (descending-powersetp (powerset ls)))
     :hints (("Goal" :use pw-cons-descendingp)))
