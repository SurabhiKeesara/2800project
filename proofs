;; THE PROOF

(thm (implies (and (lorp ls) (descending ls))
  (descending-powerset ls)))
  
;; lemmas we will need!

Lemma cons-descending-list
;; if you cons an element that is greater than descending list, get a descending list
(implies (and (rationalp n) (lorp ls) (descending ls) (> n (car ls)))
         (descending (cons n ls)))

Lemma descending-powerset
(implies (and (lorp ls) (descending ls) (lolorp ps) (descending-powerset ps))
              (descending-powerset (cons ls ps)))

Lemma descending-add-rat
(implies (and (rationalp n) (lolorp ls) (descending-powerset ls))
        (descending-powerset (add-rat n ls)))
        
Lemma descending build-subset
(implies (and (descending ls) (lololorp acc))
(descending-powerset (build-subset ls acc)))

;;how this proof would work/what it would prove:

;- (> (car ls) (car (cdr ls))) (4 3 2 1... 4>3)
;- (> (car (car (build-subset ls acc))) (car (car (build-subset (cdr ls) acc))))
;- (== (len2 (car (build-subset ls acc))) (len2 (car (build-subset (cdr ls) acc))))

;(car (car (add-rat (car ls) (car acc))))  > (car (car (build-subset (cdr ls) acc)))
;(car ls)                                  > (car (cdr ls))

Lemma greater-equal-subset:
(implies (and (lorp ls) (descending ls))
   (or (= (len2 (car (powerset ls))) (len2 (car (cdr (powerset ls))))) 
         (> (len2 (car (powerset ls))) (len2 (car (cdr (powerset ls))))) ))

;; if car powerset ls length= car cdr powerset ls , then we go to the second case
;; 1 case where they are equal -> lemma about length
;; 2 case where they aren't equal -> lemma about length not equal

;; Lemma 5: add-subset
(implies (and (lorp ls) (lololorp ls))
    (> (len2 (car (add-subset ls acc))) (len2 (car (add-subset ls (cdr acc))))))
(descending-powerset (add-subset ))

(add-subset ls acc) ... (len4, len3, len2, len1)
(add-subset ls (cdr acc)) ... (len3, len2, len1)

(len2 (car (add-subset ls acc))) > (len2 (car (add-subset ls (cdr acc))))
