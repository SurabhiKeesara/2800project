;; THE PROOF

(thm (implies (and (lorp ls) (descending ls))
  (descending-powerset ls)))

Lemma cons-descending-list
;; if you cons an element that is greater than descending list, get a descending list
(implies (and (rationalp n) (lorp ls) (descending ls) (> n (car ls)))
         (descending (cons n ls)))

Lemma descending-powerset-pf
(implies (and (lorp ls) (descending ls) (lolorp ps) (descending-powerset ps))
              (descending-powerset (cons ls ps)))

Lemma descending-add-rat
(implies (and (rationalp n) (lolorp ls) (descending-powerset ls))
        (descending-powerset (add-rat n ls)))
        
Lemma descending build-subset
(implies (and (descending ls) (lololorp acc))
(descending-powerset (build-subset ls acc)))

Lemma greater-equal-subset:
(implies (and (lorp ls) (descending ls))
   (or (= (len2 (car (powerset ls))) (len2 (car (cdr (powerset ls))))) 
         (> (len2 (car (powerset ls))) (len2 (car (cdr (powerset ls))))) ))

;; Lemma 5: add-subset
(implies (and (lorp ls) (lololorp ls))
    (> (len2 (car (add-subset ls acc))) (len2 (car (add-subset ls (cdr acc))))))
(descending-powerset (add-subset ))

;; Lemma 6: car-cdr-powerset
(implies (and (lorp ls) (descending ls) (lolorp (powerset ls)))
(equal 
(and (endp (car (powerset ls))) (consp (car (cdr (powerset ls))))) nil))

;; lemma to show the powerset and powerset-cons relationship
(defthm pw-pwcons (implies (and (rationalp x) (lorp ls) (descendingp ls) (> x (car ls)))
              (equal (powerset (cons x ls)) 
                     (powerset-cons x (powerset ls)))))

;; lemma to show that if powerset is descending, then powerset-cons is descending when they are equal
(defthm descending-pw-pwcons (implies (and (rationalp x) 
                   (lorp ls) 
                   (descendingp ls) 
                   (> x (car ls))
                   (descending-powersetp (powerset (cons x ls))))
              (descending-powersetp (powerset-cons x (powerset ls))))
  :hints (("Goal" :use pw-pwcons)))
