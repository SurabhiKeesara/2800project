(defdata lor (listof rational))
(defdata lolor (listof lor))
(defdata lololor (listof lolor))

(definec app2 (x :tl y :tl) :tl
  (if (endp x)
    y
    (cons (first x) (app2 (rest x) y))))


(definec len2 (x :tl) :nat
  (if (endp x)
    0
    (+ 1 (len2 (rest x)))))

;lor -> bool
; checks to see if the given list of rationals is in descending order
(definec descending (ls :lor) :bool
  (cond
   ((endp ls) t)
   ((endp (cdr ls)) t)
   (t (and (> (car ls) (car (cdr ls)))
           (descending (cdr ls))))))

;rational lolor -> lolor
; adds the given rational to the front of every list in the lolor
; if it is greater than the first of each list in the lolor
(definec add-rat (r :rational ls :lolor) :lolor
  (cond ((endp ls) '())
        (t (cond ((endp (car ls)) '())
                 (t (if (> r (car (car ls)))
                      (cons (cons r (car ls)) (add-rat r (cdr ls)))
                      (add-rat r (cdr ls))))))))

;lor -> lolor
; builds set of list of single items in set
(definec single (ls :lor) :lolor
  (cond
   ((endp ls) nil)
   ((consp ls) (cons (cons (car ls) nil) (single (cdr ls))))))

;lor lololor -> lolor
; builds list of subsets of size of accumulators lists plus one
(definec build-subset (ls :lor acc :lololor) :lolor
  (cond ((endp ls) '())
        ((endp acc) (single ls))
        (t (app2 (add-rat (car ls) (car acc))
                 (build-subset (cdr ls) acc)))))

;lor lololor -> lololor
; adds subsets of increasing size to the accumulator
(definec add-subset (ls :lor acc :lololor) :lololor
  (cond ((>= (len2 acc) (len2 ls)) acc)
        (t (add-subset ls (cons (build-subset ls acc) acc)))))

;lololor -> lolor
; appends items in the lololor into a lolor
(definec combine (ls :lololor) :lolor
  (cond ((endp ls) (cons '() '()))
        (t (app2 (car ls) (combine (cdr ls))))))

;lor -> lolor
; make the powerset of the given set
(definec powerset (ls :lor) :lolor
  :ic (descending ls)
  (combine (add-subset ls '())))
